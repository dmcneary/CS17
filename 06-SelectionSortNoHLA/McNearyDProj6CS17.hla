program SelSort;
#include( "stdlib.hhf" )

// David McNeary - Project 6
// This program sorts a declared array of numbers
// using a selection sort algorithm, written in
// pure assembly language in its control structures.
// Date created: 12/5/2020

const
                arrSize := 16;
static
                numsArr: uns32 [arrSize] := 
                    [2, 34, 65, 23, 78, 15, 84, 25,
                    30, 94, 64, 75, 35, 47, 20, 32];
                lastIndex: int32 := arrSize - 1;
                maxIndex: uns32;
begin SelSort;
                stdout.put("David McNeary - Begin Project 6", nl);
                stdout.put("Number of elements (size of array): ", arrSize, nl); 
                stdout.put("Original array: ", nl);

                mov(0, EBX);
DispOrgArr:     cmp(EBX, arrSize);                          //loop over arr and print elements
                je EndDispOrg;
                stdout.puti32Size(numsArr[EBX * 4], 3, ' ');
                inc(EBX);
                jmp DispOrgArr;
EndDispOrg:     stdout.newln();
                stdout.put("Now sorting...", nl);

WhileLoop:      mov(0, EAX);
                cmp(EAX, lastIndex);                 //while lastIndex > 0 do
                je EndWhileLoop;
                mov(0, maxIndex);
                mov(0, EBX);

FindMaxLoop:    cmp(EBX, lastIndex);                        //for ( mov(0, EBX); EBX <= lastIndex; inc(EBX) ) do
                jg Sort;
                mov(maxIndex, ECX);                         //load maxIndex to ECX for addressing
                mov(numsArr[ECX * 4], EAX);                 //load el at maxIndex to EAX for comparison
                cmp(EAX, numsArr[EBX * 4]);                 //if (EAX < numsArr[EBX * 4]) then
                jnb EndMaxTest;
                mov(EBX, maxIndex);                         //EBX (i) is now max index
                stdout.put("Max element is: ",numsArr[EBX * 4], nl);
EndMaxTest:     inc(EBX);
                jmp FindMaxLoop;
Sort:           mov(lastIndex, EBX);                        //load indexes into registers for addressing
                mov(maxIndex, ECX);
                mov(numsArr[EBX * 4], EDX);                 //use EDX for temp data
                mov(numsArr[ECX * 4], numsArr[EBX * 4]);    //move max el to end of array
                mov(EDX, numsArr[ECX * 4]);
                stdout.put("Swapped: ", numsArr[ECX * 4], " and ", numsArr[EBX * 4], nl);
                mov(0, EBX);
DispArr:        cmp(EBX, arrSize);                          //loop over arr and print elements
                je EndDispArr;
                stdout.puti32Size(numsArr[EBX * 4], 3, ' ');
                inc(EBX);
                jmp DispArr;
EndDispArr:     stdout.newln();
                dec(lastIndex);                             //last el is sorted, reduce selection size
                jmp WhileLoop;

EndWhileLoop:   stdout.newln();
                stdout.put("David McNeary - End Project 6", nl);
end SelSort;